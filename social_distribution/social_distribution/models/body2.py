# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model
from social_distribution.social_distribution import util


class Body2(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, query: str=None, author: str=None, authors: List[str]=None):  # noqa: E501
        """Body2 - a model defined in Swagger

        :param query: The query of this Body2.  # noqa: E501
        :type query: str
        :param author: The author of this Body2.  # noqa: E501
        :type author: str
        :param authors: The authors of this Body2.  # noqa: E501
        :type authors: List[str]
        """
        self.swagger_types = {
            'query': str,
            'author': str,
            'authors': List[str]
        }

        self.attribute_map = {
            'query': 'query',
            'author': 'author',
            'authors': 'authors'
        }
        self._query = query
        self._author = author
        self._authors = authors

    @classmethod
    def from_dict(cls, dikt) -> 'Body2':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The body_2 of this Body2.  # noqa: E501
        :rtype: Body2
        """
        return util.deserialize_model(dikt, cls)

    @property
    def query(self) -> str:
        """Gets the query of this Body2.


        :return: The query of this Body2.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query: str):
        """Sets the query of this Body2.


        :param query: The query of this Body2.
        :type query: str
        """

        self._query = query

    @property
    def author(self) -> str:
        """Gets the author of this Body2.


        :return: The author of this Body2.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author: str):
        """Sets the author of this Body2.


        :param author: The author of this Body2.
        :type author: str
        """

        self._author = author

    @property
    def authors(self) -> List[str]:
        """Gets the authors of this Body2.


        :return: The authors of this Body2.
        :rtype: List[str]
        """
        return self._authors

    @authors.setter
    def authors(self, authors: List[str]):
        """Sets the authors of this Body2.


        :param authors: The authors of this Body2.
        :type authors: List[str]
        """

        self._authors = authors

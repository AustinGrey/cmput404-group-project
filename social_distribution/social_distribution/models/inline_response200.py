# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model
from .array_of_posts import ArrayOfPosts  # noqa: F401,E501
from social_distribution.social_distribution import util


class InlineResponse200(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, query: str=None, count: int=None, size: int=None, next: str=None, previous: str=None, posts: ArrayOfPosts=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger

        :param query: The query of this InlineResponse200.  # noqa: E501
        :type query: str
        :param count: The count of this InlineResponse200.  # noqa: E501
        :type count: int
        :param size: The size of this InlineResponse200.  # noqa: E501
        :type size: int
        :param next: The next of this InlineResponse200.  # noqa: E501
        :type next: str
        :param previous: The previous of this InlineResponse200.  # noqa: E501
        :type previous: str
        :param posts: The posts of this InlineResponse200.  # noqa: E501
        :type posts: ArrayOfPosts
        """
        self.swagger_types = {
            'query': str,
            'count': int,
            'size': int,
            'next': str,
            'previous': str,
            'posts': ArrayOfPosts
        }

        self.attribute_map = {
            'query': 'query',
            'count': 'count',
            'size': 'size',
            'next': 'next',
            'previous': 'previous',
            'posts': 'posts'
        }
        self._query = query
        self._count = count
        self._size = size
        self._next = next
        self._previous = previous
        self._posts = posts

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse200':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200 of this InlineResponse200.  # noqa: E501
        :rtype: InlineResponse200
        """
        return util.deserialize_model(dikt, cls)

    @property
    def query(self) -> str:
        """Gets the query of this InlineResponse200.


        :return: The query of this InlineResponse200.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query: str):
        """Sets the query of this InlineResponse200.


        :param query: The query of this InlineResponse200.
        :type query: str
        """

        self._query = query

    @property
    def count(self) -> int:
        """Gets the count of this InlineResponse200.

        Number of posts  # noqa: E501

        :return: The count of this InlineResponse200.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: int):
        """Sets the count of this InlineResponse200.

        Number of posts  # noqa: E501

        :param count: The count of this InlineResponse200.
        :type count: int
        """

        self._count = count

    @property
    def size(self) -> int:
        """Gets the size of this InlineResponse200.

        Page size  # noqa: E501

        :return: The size of this InlineResponse200.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size: int):
        """Sets the size of this InlineResponse200.

        Page size  # noqa: E501

        :param size: The size of this InlineResponse200.
        :type size: int
        """

        self._size = size

    @property
    def next(self) -> str:
        """Gets the next of this InlineResponse200.

        Next page url  # noqa: E501

        :return: The next of this InlineResponse200.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next: str):
        """Sets the next of this InlineResponse200.

        Next page url  # noqa: E501

        :param next: The next of this InlineResponse200.
        :type next: str
        """

        self._next = next

    @property
    def previous(self) -> str:
        """Gets the previous of this InlineResponse200.

        Previous page url  # noqa: E501

        :return: The previous of this InlineResponse200.
        :rtype: str
        """
        return self._previous

    @previous.setter
    def previous(self, previous: str):
        """Sets the previous of this InlineResponse200.

        Previous page url  # noqa: E501

        :param previous: The previous of this InlineResponse200.
        :type previous: str
        """

        self._previous = previous

    @property
    def posts(self) -> ArrayOfPosts:
        """Gets the posts of this InlineResponse200.


        :return: The posts of this InlineResponse200.
        :rtype: ArrayOfPosts
        """
        return self._posts

    @posts.setter
    def posts(self, posts: ArrayOfPosts):
        """Sets the posts of this InlineResponse200.


        :param posts: The posts of this InlineResponse200.
        :type posts: ArrayOfPosts
        """

        self._posts = posts

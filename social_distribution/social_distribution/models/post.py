# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model
from .author import Author  # noqa: F401,E501
from .comment import Comment  # noqa: F401,E501
from social_distribution.social_distribution import util


class Post(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, title: str=None, source: str=None, origin: str=None, description: str=None, content_type: str=None, content: str=None, author: Author=None, categories: List[str]=None, count: int=None, size: int=None, next: str=None, comments: List[Comment]=None, published: str=None, visibility: str=None, visible_to: str=None, unlisted: bool=None):  # noqa: E501
        """Post - a model defined in Swagger

        :param id: The id of this Post.  # noqa: E501
        :type id: str
        :param title: The title of this Post.  # noqa: E501
        :type title: str
        :param source: The source of this Post.  # noqa: E501
        :type source: str
        :param origin: The origin of this Post.  # noqa: E501
        :type origin: str
        :param description: The description of this Post.  # noqa: E501
        :type description: str
        :param content_type: The content_type of this Post.  # noqa: E501
        :type content_type: str
        :param content: The content of this Post.  # noqa: E501
        :type content: str
        :param author: The author of this Post.  # noqa: E501
        :type author: Author
        :param categories: The categories of this Post.  # noqa: E501
        :type categories: List[str]
        :param count: The count of this Post.  # noqa: E501
        :type count: int
        :param size: The size of this Post.  # noqa: E501
        :type size: int
        :param next: The next of this Post.  # noqa: E501
        :type next: str
        :param comments: The comments of this Post.  # noqa: E501
        :type comments: List[Comment]
        :param published: The published of this Post.  # noqa: E501
        :type published: str
        :param visibility: The visibility of this Post.  # noqa: E501
        :type visibility: str
        :param visible_to: The visible_to of this Post.  # noqa: E501
        :type visible_to: str
        :param unlisted: The unlisted of this Post.  # noqa: E501
        :type unlisted: bool
        """
        self.swagger_types = {
            'id': str,
            'title': str,
            'source': str,
            'origin': str,
            'description': str,
            'content_type': str,
            'content': str,
            'author': Author,
            'categories': List[str],
            'count': int,
            'size': int,
            'next': str,
            'comments': List[Comment],
            'published': str,
            'visibility': str,
            'visible_to': str,
            'unlisted': bool
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'source': 'source',
            'origin': 'origin',
            'description': 'description',
            'content_type': 'contentType',
            'content': 'content',
            'author': 'author',
            'categories': 'categories',
            'count': 'count',
            'size': 'size',
            'next': 'next',
            'comments': 'comments',
            'published': 'published',
            'visibility': 'visibility',
            'visible_to': 'visibleTo',
            'unlisted': 'unlisted'
        }
        self._id = id
        self._title = title
        self._source = source
        self._origin = origin
        self._description = description
        self._content_type = content_type
        self._content = content
        self._author = author
        self._categories = categories
        self._count = count
        self._size = size
        self._next = next
        self._comments = comments
        self._published = published
        self._visibility = visibility
        self._visible_to = visible_to
        self._unlisted = unlisted

    @classmethod
    def from_dict(cls, dikt) -> 'Post':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Post of this Post.  # noqa: E501
        :rtype: Post
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Post.

        ID of the post  # noqa: E501

        :return: The id of this Post.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Post.

        ID of the post  # noqa: E501

        :param id: The id of this Post.
        :type id: str
        """

        self._id = id

    @property
    def title(self) -> str:
        """Gets the title of this Post.

        Blog post title  # noqa: E501

        :return: The title of this Post.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Post.

        Blog post title  # noqa: E501

        :param title: The title of this Post.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def source(self) -> str:
        """Gets the source of this Post.

        Where did you get this post from  # noqa: E501

        :return: The source of this Post.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source: str):
        """Sets the source of this Post.

        Where did you get this post from  # noqa: E501

        :param source: The source of this Post.
        :type source: str
        """

        self._source = source

    @property
    def origin(self) -> str:
        """Gets the origin of this Post.

        Where is it actually from  # noqa: E501

        :return: The origin of this Post.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin: str):
        """Sets the origin of this Post.

        Where is it actually from  # noqa: E501

        :param origin: The origin of this Post.
        :type origin: str
        """

        self._origin = origin

    @property
    def description(self) -> str:
        """Gets the description of this Post.

        A brief description of the post  # noqa: E501

        :return: The description of this Post.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Post.

        A brief description of the post  # noqa: E501

        :param description: The description of this Post.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def content_type(self) -> str:
        """Gets the content_type of this Post.

        The content type of the post  # noqa: E501

        :return: The content_type of this Post.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type: str):
        """Sets the content_type of this Post.

        The content type of the post  # noqa: E501

        :param content_type: The content_type of this Post.
        :type content_type: str
        """
        allowed_values = ["text/plain", "text/markdown", "image/png;base64", "image/jpeg;base64", "application/base64"]  # noqa: E501
        if content_type not in allowed_values:
            raise ValueError(
                "Invalid value for `content_type` ({0}), must be one of {1}"
                .format(content_type, allowed_values)
            )

        self._content_type = content_type

    @property
    def content(self) -> str:
        """Gets the content of this Post.

        Content of the post  # noqa: E501

        :return: The content of this Post.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this Post.

        Content of the post  # noqa: E501

        :param content: The content of this Post.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def author(self) -> Author:
        """Gets the author of this Post.


        :return: The author of this Post.
        :rtype: Author
        """
        return self._author

    @author.setter
    def author(self, author: Author):
        """Sets the author of this Post.


        :param author: The author of this Post.
        :type author: Author
        """

        self._author = author

    @property
    def categories(self) -> List[str]:
        """Gets the categories of this Post.

        A array of post categories  # noqa: E501

        :return: The categories of this Post.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories: List[str]):
        """Sets the categories of this Post.

        A array of post categories  # noqa: E501

        :param categories: The categories of this Post.
        :type categories: List[str]
        """

        self._categories = categories

    @property
    def count(self) -> int:
        """Gets the count of this Post.

        Total number of comments  # noqa: E501

        :return: The count of this Post.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: int):
        """Sets the count of this Post.

        Total number of comments  # noqa: E501

        :param count: The count of this Post.
        :type count: int
        """

        self._count = count

    @property
    def size(self) -> int:
        """Gets the size of this Post.

        Page size  # noqa: E501

        :return: The size of this Post.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size: int):
        """Sets the size of this Post.

        Page size  # noqa: E501

        :param size: The size of this Post.
        :type size: int
        """

        self._size = size

    @property
    def next(self) -> str:
        """Gets the next of this Post.

        The first page of comments  # noqa: E501

        :return: The next of this Post.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next: str):
        """Sets the next of this Post.

        The first page of comments  # noqa: E501

        :param next: The next of this Post.
        :type next: str
        """

        self._next = next

    @property
    def comments(self) -> List[Comment]:
        """Gets the comments of this Post.

        Comments of the post  # noqa: E501

        :return: The comments of this Post.
        :rtype: List[Comment]
        """
        return self._comments

    @comments.setter
    def comments(self, comments: List[Comment]):
        """Sets the comments of this Post.

        Comments of the post  # noqa: E501

        :param comments: The comments of this Post.
        :type comments: List[Comment]
        """

        self._comments = comments

    @property
    def published(self) -> str:
        """Gets the published of this Post.

        ISO 8601 TIMESTAMP  # noqa: E501

        :return: The published of this Post.
        :rtype: str
        """
        return self._published

    @published.setter
    def published(self, published: str):
        """Sets the published of this Post.

        ISO 8601 TIMESTAMP  # noqa: E501

        :param published: The published of this Post.
        :type published: str
        """

        self._published = published

    @property
    def visibility(self) -> str:
        """Gets the visibility of this Post.

        Visibility of the post  # noqa: E501

        :return: The visibility of this Post.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility: str):
        """Sets the visibility of this Post.

        Visibility of the post  # noqa: E501

        :param visibility: The visibility of this Post.
        :type visibility: str
        """
        allowed_values = ["PUBLIC", "FOAF", "FRIENDS", "PRIVATE", "SERVERONLY"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility

    @property
    def visible_to(self) -> str:
        """Gets the visible_to of this Post.

        List of author URIs who to read the private message  # noqa: E501

        :return: The visible_to of this Post.
        :rtype: str
        """
        return self._visible_to

    @visible_to.setter
    def visible_to(self, visible_to: str):
        """Sets the visible_to of this Post.

        List of author URIs who to read the private message  # noqa: E501

        :param visible_to: The visible_to of this Post.
        :type visible_to: str
        """

        self._visible_to = visible_to

    @property
    def unlisted(self) -> bool:
        """Gets the unlisted of this Post.

        Unlisted means it is public if you know the post name -- use this for images, it's so images don't show up in timelines  # noqa: E501

        :return: The unlisted of this Post.
        :rtype: bool
        """
        return self._unlisted

    @unlisted.setter
    def unlisted(self, unlisted: bool):
        """Sets the unlisted of this Post.

        Unlisted means it is public if you know the post name -- use this for images, it's so images don't show up in timelines  # noqa: E501

        :param unlisted: The unlisted of this Post.
        :type unlisted: bool
        """

        self._unlisted = unlisted
